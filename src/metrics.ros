# imports
:global getTimestamp;
:global nrMetricsToJson;
:global NrApiKey;

:local timestamp [$getTimestamp];
:local NrApiKey $NrApiKey;

:local toMetric do={
    :ret {"name"=$name; "value"=$value; "type"="gauge"};
}

:local observedMetrics {
    "mikrotik.system.cpu.load"=[/system resource get cpu-load];
    "mikrotik.system.memory.total"=[/system resource get total-memory];
    "mikrotik.system.memory.free"=[/system resource get free-memory];

    "mikrotik.firewall.connection.tcp"=[/ip firewall connection print count-only where protocol=tcp];
    "mikrotik.firewall.connection.udp"=[/ip firewall connection print count-only where protocol=udp];
    "mikrotik.firewall.connection.established"=[/ip firewall connection print count-only where tcp-state=established];

    "mikrotik.ip.dns.cache.size"=[/ip dns get cache-size];
    "mikrotik.ip.dns.cache.used"=[/ip dns get cache-used];
    "mikrotik.ip.pool.used"=[/ip pool used print count-only];
    "mikrotik.ip.dhcpserver.leases"=[/ip dhcp-server lease print active count-only];
};


:local metricsArray [:toarray ""];
:foreach k,v in=$observedMetrics do={
    :local metric [$toMetric name=$k value=$v];
    :set $metricsArray ($metricsArray , {$metric});
}

:local httpData [$nrMetricsToJson metrics=$metricsArray timestamp=$timestamp];

/tool fetch http-method=post output=none http-header-field="Content-Type:application/json,Api-Key:$NrApiKey" http-data=$httpData url="https://metric-api.eu.newrelic.com/metric/v1"
